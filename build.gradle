plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2' //rest docs
	id 'jacoco'
}

group = 'com.capstone'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	//for UnivCert
	maven{url 'https://jitpack.io'}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//rest docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	//UnivCert
	implementation 'com.github.in-seo:univcert:master-SNAPSHOT'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//object storage
	implementation platform('software.amazon.awssdk:bom:2.27.21')
	implementation 'software.amazon.awssdk:s3'
	implementation 'software.amazon.awssdk:url-connection-client'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy tasks.named('jacocoTestReport')
}

////rest docs
tasks.register('copyApiDocument', Copy) { // 자동으로 생성된 문서를 옮겨주는 copyApiDocument task 선언
	dependsOn asciidoctor // copyApiDocument를 수행하기전 asciidoctor를 수행하도록 선언
	doFirst { // 작업이 실행되기전 수행하는 작업 선언
		delete file("src/main/resources/static/docs") // 기존 문서 삭제
	}
	// 생성된 문서를 static/docs로 이동
	from asciidoctor.outputDir
	into file("src/main/resources/static/docs")
}

asciidoctor {
	dependsOn test
	configurations 'asciidoctorExt'
}

build {
	dependsOn copyApiDocument // 프로젝트 빌드 전 copyApiDocument를 실행하도록 변경
}

jacoco {
	toolVersion = "0.8.11"
}

tasks.named('jacocoTestReport', JacocoReport) {
	dependsOn tasks.named('test')

	reports {
		html.required.set(true)
		xml.required.set(true)
	}

	// 자바 소스 디렉터리
	sourceDirectories.setFrom(files('src/main/java'))

	// 컴파일된 클래스 디렉터리 (layout.buildDirectory 사용)
	classDirectories.setFrom(
			files(layout.buildDirectory.dir('classes/java/main'))
					.asFileTree
					.matching { exclude '**/config/**', '**/common/**', '**/dto/**', '**/domain/**', '**/filter/**'}  // 제외할 패턴이 있으면 추가
	)

	def jacocoDir = layout.buildDirectory.dir('jacoco').get().asFile
	executionData.setFrom(
			fileTree(dir: jacocoDir, include: ['*.exec'])
	)
}

// check 태스크에 커버리지 검증 포함
tasks.named('check') {
	dependsOn tasks.named('jacocoTestCoverageVerification')
}