name: Java CI with Gradle

on:
  push:
    branches:
      - main
      - dev
      - test/ci-cd

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      FCM_JSON: ${{ secrets.FCM_JSON }}
      APPLICATION_YML: ${{ secrets.APPLICATION_YML }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Create dummy Firebase JSON for tests
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/test/')
        run: |
          mkdir -p src/main/resources/firebase
          echo '{}' > src/main/resources/firebase/rentit-5b36b-firebase-adminsdk-fbsvc-ab4f4216ef.json

      - name: Run tests
        run: ./gradlew clean test -Dspring.profiles.active=test

      - name: Prepare production config
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        run: |
          # Inject real application.yml and Firebase JSON into resources
          mkdir -p src/main/resources/firebase
          echo "$APPLICATION_YML" > src/main/resources/application.yml
          echo "$FCM_JSON" > src/main/resources/firebase/rentit-5b36b-firebase-adminsdk-fbsvc-ab4f4216ef.json

      - name: Build JAR (skip tests)
        run: ./gradlew bootJar -x test

      - name: Build & push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REPO:     ${{ secrets.DOCKER_REPO }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build \
            --build-arg FCM_JSON="$FCM_JSON" \
            -t "$DOCKER_REPO:latest" .
          docker push "$DOCKER_REPO:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port:     ${{ secrets.SSH_PORT }}
          script: |
            docker pull "${{ secrets.DOCKER_REPO }}:latest"
            docker stop rentit || true
            docker rm   rentit || true
            docker run -d \
              --name rentit \
              --add-host host.docker.internal:host-gateway \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/rentit \
              -p 8080:8080 \
              "${{ secrets.DOCKER_REPO }}:latest"
