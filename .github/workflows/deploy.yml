# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle 

on:
  push:
    branches: [ "main", "dev", "test/ci-cd" ]
  pull_request:
    branches: [ "main", "dev", "test/ci-cd" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
      
    # 테스트 및 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
  
    #빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --no-cache -t ${{ secrets.DOCKER_REPO }}:latest .
        docker push ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }} 
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_REPO }}:latest
  
            echo "Stopping old container..."
            docker stop  rentit || true
            docker rm  rentit || true
  
            echo "Starting new container..."
            docker run -d --name rentit -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
