# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle 

on:
  push:
    branches: [ "main", "dev", "test/ci-cd" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
    # Database
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    # MQTT
      MQTT_BROKER_URL: ${{ secrets.MQTT_BROKER_URL }}
      MQTT_USERNAME: ${{ secrets.MQTT_USERNAME }}
      MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}

    # UnivCert
      UNIVCERT_API_KEY: ${{ secrets.UNIVCERT_API_KEY }}

    # JWT
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    # Storage
      UPLOAD_DIR: ${{ secrets.UPLOAD_DIR }}

    # NCP Object Storage
      NCP_ENDPOINT: ${{ secrets.NCP_ENDPOINT }}
      NCP_BUCKET: ${{ secrets.NCP_BUCKET }}
      NCP_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
      NCP_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}

    # NH API
      NH_BASE_URL: ${{ secrets.NH_BASE_URL }}
      NH_ISCD: ${{ secrets.NH_ISCD }}
      NH_FINTECH_APS_NO: ${{ secrets.NH_FINTECH_APS_NO }}
      NH_ACCESS_TOKEN: ${{ secrets.NH_ACCESS_TOKEN }}
      NH_SVC_DRAWING: ${{ secrets.NH_SVC_DRAWING }}
      NH_SVC_DEPOSIT: ${{ secrets.NH_SVC_DEPOSIT }}

    # GCP 서비스 계정
      GCP_SERVICE_ACCOUNT_TYPE: ${{ secrets.GCP_SERVICE_ACCOUNT_TYPE }}
      GCP_SERVICE_ACCOUNT_PROJECT_ID: ${{ secrets.GCP_SERVICE_ACCOUNT_PROJECT_ID }}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${{ secrets.GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID }}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_PRIVATE_KEY }}
      GCP_SERVICE_ACCOUNT_CLIENT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_CLIENT_EMAIL }}
      GCP_SERVICE_ACCOUNT_CLIENT_ID: ${{ secrets.GCP_SERVICE_ACCOUNT_CLIENT_ID }}
      GCP_SERVICE_ACCOUNT_AUTH_URI: ${{ secrets.GCP_SERVICE_ACCOUNT_AUTH_URI }}
      GCP_SERVICE_ACCOUNT_TOKEN_URI: ${{ secrets.GCP_SERVICE_ACCOUNT_TOKEN_URI }}
      GCP_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.GCP_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL }}
      GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL: ${{ secrets.GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL }}
      GCP_SERVICE_ACCOUNT_UNIVERSE_DOMAIN: ${{ secrets.GCP_SERVICE_ACCOUNT_UNIVERSE_DOMAIN }}

    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: set application.yml
      run: |
        mkdir -p src/main/resources/firebase
        printf '%s\n' "${{ secrets.APPLICATION }}" \
        > src/main/resources/application.yml
        printf '%s\n' "${{ secrets.FCM_JSON }}" \
        > src/main/resources/firebase/rentit-5b36b-firebase-adminsdk-fbsvc-ab4f4216ef.json

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
      
    # 테스트 및 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
  
    #빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build --no-cache -t ${{ secrets.DOCKER_REPO }}:latest .
        docker push ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }} 
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_REPO }}:latest

            docker ps
            echo "Stopping old container..."
            docker stop  rentit || true
            docker rm  rentit || true
  
            echo "Starting new container..."
            docker run -d --name rentit -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
