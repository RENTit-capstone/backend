name: Java CI with Gradle

on:
  push:
    branches:
      - main
      - dev
      - test/ci-cd

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      FCM_JSON:    ${{ secrets.FCM_JSON }}
      APPLICATION_YML: ${{ secrets.APPLICATION_YML }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run tests (test profile)
        run: ./gradlew clean test -Dspring.profiles.active=test

      - name: Build & push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REPO:     ${{ secrets.DOCKER_REPO }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build --no-cache \
            --build-arg APPLICATION_YML="${{ secrets.APPLICATION_YML }}" \
            --build-arg FCM_JSON="${{ secrets.FCM_JSON }}" \
            -t "$DOCKER_REPO:latest" .
          docker push "$DOCKER_REPO:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      GF_ADMIN_PASSWORD_B64: ${{ secrets.GF_ADMIN_PASSWORD_B64 }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml
            Dockerfile
            monitoring
          sparse-checkout-cone-mode: false

      - name: Copy monitoring stack to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml,Dockerfile,monitoring/**"
          target: "~/monitoring"

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          envs: GF_ADMIN_PASSWORD_B64
          script: |
            set -e
            
            echo "▶ 1) Backend 업데이트"
            docker pull "${{ secrets.DOCKER_REPO }}:latest"
            docker stop rentit         || true
            docker rm   rentit         || true
            docker run -d \
              --name rentit \
              --add-host host.docker.internal:host-gateway \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/rentit \
              -e FCM_JSON="${{ secrets.FCM_JSON }}" \
              -p 8080:8080 \
              "${{ secrets.DOCKER_REPO }}:latest"
            
            echo "▶ 2) Monitoring 스택 배포(Compose)"
            cd ~/monitoring
            
            # .env 생성 (Base64 → 평문 디코딩)
            echo "GF_ADMIN_PASSWORD=$(echo $GF_ADMIN_PASSWORD_B64 | base64 -d)" > .env
            
            # 최신 이미지 가져오고 up -d
            docker compose --env-file .env pull
            docker compose --env-file .env up -d
            
            echo "✅  Deployment complete"